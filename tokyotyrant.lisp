;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 1.3.38
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package :tokyotyrant-sys)
(define-foreign-library tokyotyrant
  (:unix (:or "libtokyotyrant.so.7" "libtokyotyrant.so"))
  (t (:default "libtokyotyrant")))
(use-foreign-library tokyotyrant)




;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcstruct TCRDB
	(fd :int)
	(sock :pointer)
	(ecode :int))

(defanonenum 
	TTESUCCESS
	TTEINVALID
	TTENOHOST
	TTEREFUSED
	TTESEND
	TTERECV
	TTEKEEP
	TTENOREC
	(TTEMISC #.9999))

(defanonenum 
	(RDBXOLCKREC #.(cl:ash 1 0))
	(RDBXOLCKGLB #.(cl:ash 1 1)))

(defanonenum 
	(RDBMONOULOG #.(cl:ash 1 0)))

(cffi:defcfun ("tcrdberrmsg" tcrdberrmsg) :string
  (ecode :int))

(cffi:defcfun ("tcrdbnew" tcrdbnew) :pointer)

(cffi:defcfun ("tcrdbdel" tcrdbdel) :void
  (rdb :pointer))

(cffi:defcfun ("tcrdbecode" tcrdbecode) :int
  (rdb :pointer))

(cffi:defcfun ("tcrdbopen" tcrdbopen) :pointer
  (rdb :pointer)
  (host :string)
  (port :int))

(cffi:defcfun ("tcrdbclose" tcrdbclose) :pointer
  (rdb :pointer))

(cffi:defcfun ("tcrdbput" tcrdbput) :pointer
  (rdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcrdbput2" tcrdbput2) :pointer
  (rdb :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcrdbputkeep" tcrdbputkeep) :pointer
  (rdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcrdbputkeep2" tcrdbputkeep2) :pointer
  (rdb :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcrdbputcat" tcrdbputcat) :pointer
  (rdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcrdbputcat2" tcrdbputcat2) :pointer
  (rdb :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcrdbputshl" tcrdbputshl) :pointer
  (rdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int)
  (width :int))

(cffi:defcfun ("tcrdbputshl2" tcrdbputshl2) :pointer
  (rdb :pointer)
  (kstr :string)
  (vstr :string)
  (width :int))

(cffi:defcfun ("tcrdbputnr" tcrdbputnr) :pointer
  (rdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcrdbputnr2" tcrdbputnr2) :pointer
  (rdb :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcrdbout" tcrdbout) :pointer
  (rdb :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcrdbout2" tcrdbout2) :pointer
  (rdb :pointer)
  (kstr :string))

(cffi:defcfun ("tcrdbget" tcrdbget) :pointer
  (rdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (sp :pointer))

(cffi:defcfun ("tcrdbget2" tcrdbget2) :string
  (rdb :pointer)
  (kstr :string))

(cffi:defcfun ("tcrdbget3" tcrdbget3) :pointer
  (rdb :pointer)
  (recs :pointer))

(cffi:defcfun ("tcrdbvsiz" tcrdbvsiz) :int
  (rdb :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcrdbvsiz2" tcrdbvsiz2) :int
  (rdb :pointer)
  (kstr :string))

(cffi:defcfun ("tcrdbiterinit" tcrdbiterinit) :pointer
  (rdb :pointer))

(cffi:defcfun ("tcrdbiternext" tcrdbiternext) :pointer
  (rdb :pointer)
  (sp :pointer))

(cffi:defcfun ("tcrdbiternext2" tcrdbiternext2) :string
  (rdb :pointer))

(cffi:defcfun ("tcrdbfwmkeys" tcrdbfwmkeys) :pointer
  (rdb :pointer)
  (pbuf :pointer)
  (psiz :int)
  (max :int))

(cffi:defcfun ("tcrdbfwmkeys2" tcrdbfwmkeys2) :pointer
  (rdb :pointer)
  (pstr :string)
  (max :int))

(cffi:defcfun ("tcrdbaddint" tcrdbaddint) :int
  (rdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (num :int))

(cffi:defcfun ("tcrdbadddouble" tcrdbadddouble) :double
  (rdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (num :double))

(cffi:defcfun ("tcrdbext" tcrdbext) :pointer
  (rdb :pointer)
  (name :string)
  (opts :int)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int)
  (sp :pointer))

(cffi:defcfun ("tcrdbext2" tcrdbext2) :string
  (rdb :pointer)
  (name :string)
  (opts :int)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcrdbsync" tcrdbsync) :pointer
  (rdb :pointer))

(cffi:defcfun ("tcrdbvanish" tcrdbvanish) :pointer
  (rdb :pointer))

(cffi:defcfun ("tcrdbcopy" tcrdbcopy) :pointer
  (rdb :pointer)
  (path :string))

(cffi:defcfun ("tcrdbrestore" tcrdbrestore) :pointer
  (rdb :pointer)
  (path :string)
  (ts :pointer))

(cffi:defcfun ("tcrdbsetmst" tcrdbsetmst) :pointer
  (rdb :pointer)
  (host :string)
  (port :int))

(cffi:defcfun ("tcrdbrnum" tcrdbrnum) :pointer
  (rdb :pointer))

(cffi:defcfun ("tcrdbsize" tcrdbsize) :pointer
  (rdb :pointer))

(cffi:defcfun ("tcrdbstat" tcrdbstat) :string
  (rdb :pointer))

(cffi:defcfun ("tcrdbmisc" tcrdbmisc) :pointer
  (rdb :pointer)
  (name :string)
  (opts :int)
  (args :pointer))

(defanonenum 
	(RDBITLEXICAL #.TDBITEXICA)
	(RDBITDECIMAL #.TDBITDECIMA)
	(RDBITOPT #.TDBITOPT)
	(RDBITVOID #.TDBITVOID)
	(RDBITKEEP #.TDBITKEEP))

(cffi:defcstruct RDBQRY
	(rdb :pointer)
	(args :pointer))

(defanonenum 
	(RDBQCSTREQ #.TDBQCSTREQ)
	(RDBQCSTRINC #.TDBQCSTRINC)
	(RDBQCSTRBW #.TDBQCSTRBW)
	(RDBQCSTREW #.TDBQCSTREW)
	(RDBQCSTRAND #.TDBQCSTRAND)
	(RDBQCSTROR #.TDBQCSTROR)
	(RDBQCSTROREQ #.TDBQCSTROREQ)
	(RDBQCSTRRX #.TDBQCSTRRX)
	(RDBQCNUMEQ #.TDBQCNMEQ)
	(RDBQCNUMGT #.TDBQCNMGT)
	(RDBQCNUMGE #.TDBQCNMGE)
	(RDBQCNUMLT #.TDBQCNMT)
	(RDBQCNUMLE #.TDBQCNME)
	(RDBQCNUMBT #.TDBQCNMBT)
	(RDBQCNUMOREQ #.TDBQCNMOREQ)
	(RDBQCNEGATE #.TDBQCNEGATE)
	(RDBQCNOIDX #.TDBQCNOIDX))

(defanonenum 
	(RDBQOSTRASC #.TDBQOSTRASC)
	(RDBQOSTRDESC #.TDBQOSTRDESC)
	(RDBQONUMASC #.TDBQONMASC)
	(RDBQONUMDESC #.TDBQONMDESC))

(cffi:defcfun ("tcrdbtblput" tcrdbtblput) :pointer
  (rdb :pointer)
  (pkbuf :pointer)
  (pksiz :int)
  (cols :pointer))

(cffi:defcfun ("tcrdbtblputkeep" tcrdbtblputkeep) :pointer
  (rdb :pointer)
  (pkbuf :pointer)
  (pksiz :int)
  (cols :pointer))

(cffi:defcfun ("tcrdbtblputcat" tcrdbtblputcat) :pointer
  (rdb :pointer)
  (pkbuf :pointer)
  (pksiz :int)
  (cols :pointer))

(cffi:defcfun ("tcrdbtblout" tcrdbtblout) :pointer
  (rdb :pointer)
  (pkbuf :pointer)
  (pksiz :int))

(cffi:defcfun ("tcrdbtblget" tcrdbtblget) :pointer
  (rdb :pointer)
  (pkbuf :pointer)
  (pksiz :int))

(cffi:defcfun ("tcrdbtblsetindex" tcrdbtblsetindex) :pointer
  (rdb :pointer)
  (name :string)
  (type :int))

(cffi:defcfun ("tcrdbtblgenuid" tcrdbtblgenuid) :pointer
  (rdb :pointer))

(cffi:defcfun ("tcrdbqrynew" tcrdbqrynew) :pointer
  (rdb :pointer))

(cffi:defcfun ("tcrdbqrydel" tcrdbqrydel) :void
  (qry :pointer))

(cffi:defcfun ("tcrdbqryaddcond" tcrdbqryaddcond) :void
  (qry :pointer)
  (name :string)
  (op :int)
  (expr :string))

(cffi:defcfun ("tcrdbqrysetorder" tcrdbqrysetorder) :void
  (qry :pointer)
  (name :string)
  (type :int))

(cffi:defcfun ("tcrdbqrysetmax" tcrdbqrysetmax) :void
  (qry :pointer)
  (max :int))

(cffi:defcfun ("tcrdbqrysearch" tcrdbqrysearch) :pointer
  (qry :pointer))

(cffi:defcfun ("tcrdbqrysearchout" tcrdbqrysearchout) :pointer
  (qry :pointer))

(cffi:defcfun ("tcrdbqrysearchget" tcrdbqrysearchget) :pointer
  (qry :pointer))

(cffi:defcfun ("tcrdbqryrescols" tcrdbqryrescols) :pointer
  (res :pointer)
  (index :int))

(cl:defconstant TCULSUFFIX ".ulog")

(cl:defconstant TCULMAGICNUM #xc9)

(cl:defconstant TCULMAGICNOP #xca)

(cl:defconstant TCULRMTXNUM 31)

(cffi:defcstruct TCULOG
	(rmtxs :pointer)
	(rwlck :pointer)
	(cnd :pointer)
	(wmtx :pointer)
	(base :string)
	(limsiz :pointer)
	(max :int)
	(fd :int)
	(size :pointer)
	(aiocbs :pointer)
	(aiocbi :int)
	(aioend :pointer))

(cffi:defcstruct TCULRD
	(ulog :pointer)
	(ts :pointer)
	(num :int)
	(fd :int)
	(rbuf :string)
	(rsiz :int))

(cffi:defcstruct TCREPL
	(fd :int)
	(sock :pointer)
	(rbuf :string)
	(rsiz :int))

(cffi:defcfun ("tculognew" tculognew) :pointer)

(cffi:defcfun ("tculogdel" tculogdel) :void
  (ulog :pointer))

(cffi:defcfun ("tculogsetaio" tculogsetaio) :pointer
  (ulog :pointer))

(cffi:defcfun ("tculogopen" tculogopen) :pointer
  (ulog :pointer)
  (base :string)
  (limsiz :pointer))

(cffi:defcfun ("tculogclose" tculogclose) :pointer
  (ulog :pointer))

(cffi:defcfun ("tculogrmtxidx" tculogrmtxidx) :int
  (ulog :pointer)
  (kbuf :string)
  (ksiz :int))

(cffi:defcfun ("tculogbegin" tculogbegin) :pointer
  (ulog :pointer)
  (idx :int))

(cffi:defcfun ("tculogend" tculogend) :pointer
  (ulog :pointer)
  (idx :int))

(cffi:defcfun ("tculogwrite" tculogwrite) :pointer
  (ulog :pointer)
  (ts :pointer)
  (sid :pointer)
  (ptr :pointer)
  (size :int))

(cffi:defcfun ("tculrdnew" tculrdnew) :pointer
  (ulog :pointer)
  (ts :pointer))

(cffi:defcfun ("tculrddel" tculrddel) :void
  (ulrd :pointer))

(cffi:defcfun ("tculrdwait" tculrdwait) :void
  (ulrd :pointer))

(cffi:defcfun ("tculrdread" tculrdread) :pointer
  (ulrd :pointer)
  (sp :pointer)
  (tsp :pointer)
  (sidp :pointer))

(cffi:defcfun ("tculogadbput" tculogadbput) :pointer
  (ulog :pointer)
  (sid :pointer)
  (adb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tculogadbputkeep" tculogadbputkeep) :pointer
  (ulog :pointer)
  (sid :pointer)
  (adb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tculogadbputcat" tculogadbputcat) :pointer
  (ulog :pointer)
  (sid :pointer)
  (adb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tculogadbout" tculogadbout) :pointer
  (ulog :pointer)
  (sid :pointer)
  (adb :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tculogadbaddint" tculogadbaddint) :int
  (ulog :pointer)
  (sid :pointer)
  (adb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (num :int))

(cffi:defcfun ("tculogadbadddouble" tculogadbadddouble) :double
  (ulog :pointer)
  (sid :pointer)
  (adb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (num :double))

(cffi:defcfun ("tculogadbvanish" tculogadbvanish) :pointer
  (ulog :pointer)
  (sid :pointer)
  (adb :pointer))

(cffi:defcfun ("tculogadbmisc" tculogadbmisc) :pointer
  (ulog :pointer)
  (sid :pointer)
  (adb :pointer)
  (name :string)
  (args :pointer))

(cffi:defcfun ("tculogadbrestore" tculogadbrestore) :pointer
  (adb :pointer)
  (path :string)
  (ts :pointer)
  (con :pointer)
  (ulog :pointer))

(cffi:defcfun ("tculogadbredo" tculogadbredo) :pointer
  (adb :pointer)
  (ptr :string)
  (size :int)
  (con :pointer)
  (ulog :pointer)
  (sid :pointer))

(cffi:defcfun ("tcreplnew" tcreplnew) :pointer)

(cffi:defcfun ("tcrepldel" tcrepldel) :void
  (repl :pointer))

(cffi:defcfun ("tcreplopen" tcreplopen) :pointer
  (repl :pointer)
  (host :string)
  (port :int)
  (ts :pointer)
  (sid :pointer))

(cffi:defcfun ("tcreplclose" tcreplclose) :pointer
  (repl :pointer))

(cffi:defcfun ("tcreplread" tcreplread) :string
  (repl :pointer)
  (sp :pointer)
  (tsp :pointer)
  (sidp :pointer))


