;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 1.3.38
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package :tokyodystopia-sys)
(define-foreign-library tokyodystopia
  (:unix (:or "libtokyodystopia.so.7" "libtokyodystopia.so"))
  (t (:default "libtokyodystopia")))
(use-foreign-library tokyodystopia)




;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant IDBQDBMAX 32)

(cffi:defcstruct TCIDB
	(mmtx :pointer)
	(path :string)
	(wmode :pointer)
	(qopts :pointer)
	(qomode :int)
	(txdb :pointer)
	(idxs :pointer)
	(inum :pointer)
	(cnum :pointer)
	(ernum :pointer)
	(etnum :pointer)
	(iusiz :pointer)
	(opts :pointer)
	(synccb :pointer)
	(syncopq :pointer)
	(exopts :pointer))

(defanonenum 
	(IDBTLARGE #.(cl:ash 1 0))
	(IDBTDEFLATE #.(cl:ash 1 1))
	(IDBTBZIP #.(cl:ash 1 2))
	(IDBTTCBS #.(cl:ash 1 3)))

(defanonenum 
	(IDBOREADER #.(cl:ash 1 0))
	(IDBOWRITER #.(cl:ash 1 1))
	(IDBOCREAT #.(cl:ash 1 2))
	(IDBOTRUNC #.(cl:ash 1 3))
	(IDBONOLCK #.(cl:ash 1 4))
	(IDBOLCKNB #.(cl:ash 1 5)))

(defanonenum 
	(IDBSSUBSTR #.QDBSSBSTR)
	(IDBSPREFIX #.QDBSPREFIX)
	(IDBSSUFFIX #.QDBSSFFIX)
	(IDBSFULL #.QDBSF)
	IDBSTOKEN
	IDBSTOKPRE
	IDBSTOKSUF)

(cffi:defcfun ("tcidberrmsg" tcidberrmsg) :string
  (ecode :int))

(cffi:defcfun ("tcidbnew" tcidbnew) :pointer)

(cffi:defcfun ("tcidbdel" tcidbdel) :void
  (idb :pointer))

(cffi:defcfun ("tcidbecode" tcidbecode) :int
  (idb :pointer))

(cffi:defcfun ("tcidbtune" tcidbtune) :pointer
  (idb :pointer)
  (ernum :pointer)
  (etnum :pointer)
  (iusiz :pointer)
  (opts :pointer))

(cffi:defcfun ("tcidbsetcache" tcidbsetcache) :pointer
  (idb :pointer)
  (icsiz :pointer)
  (lcnum :pointer))

(cffi:defcfun ("tcidbsetfwmmax" tcidbsetfwmmax) :pointer
  (idb :pointer)
  (fwmmax :pointer))

(cffi:defcfun ("tcidbopen" tcidbopen) :pointer
  (idb :pointer)
  (path :string)
  (omode :int))

(cffi:defcfun ("tcidbclose" tcidbclose) :pointer
  (idb :pointer))

(cffi:defcfun ("tcidbput" tcidbput) :pointer
  (idb :pointer)
  (id :pointer)
  (text :string))

(cffi:defcfun ("tcidbout" tcidbout) :pointer
  (idb :pointer)
  (id :pointer))

(cffi:defcfun ("tcidbget" tcidbget) :string
  (idb :pointer)
  (id :pointer))

(cffi:defcfun ("tcidbsearch" tcidbsearch) :pointer
  (idb :pointer)
  (word :string)
  (smode :int)
  (np :pointer))

(cffi:defcfun ("tcidbsearch2" tcidbsearch2) :pointer
  (idb :pointer)
  (expr :string)
  (np :pointer))

(cffi:defcfun ("tcidbiterinit" tcidbiterinit) :pointer
  (idb :pointer))

(cffi:defcfun ("tcidbiternext" tcidbiternext) :pointer
  (idb :pointer))

(cffi:defcfun ("tcidbsync" tcidbsync) :pointer
  (idb :pointer))

(cffi:defcfun ("tcidboptimize" tcidboptimize) :pointer
  (idb :pointer))

(cffi:defcfun ("tcidbvanish" tcidbvanish) :pointer
  (idb :pointer))

(cffi:defcfun ("tcidbcopy" tcidbcopy) :pointer
  (idb :pointer)
  (path :string))

(cffi:defcfun ("tcidbpath" tcidbpath) :string
  (idb :pointer))

(cffi:defcfun ("tcidbrnum" tcidbrnum) :pointer
  (idb :pointer))

(cffi:defcfun ("tcidbfsiz" tcidbfsiz) :pointer
  (idb :pointer))

(defanonenum 
	(IDBXNOTXT #.(cl:ash 1 0)))

(cffi:defcfun ("tcidbsetdbgfd" tcidbsetdbgfd) :void
  (idb :pointer)
  (fd :int))

(cffi:defcfun ("tcidbdbgfd" tcidbdbgfd) :int
  (idb :pointer))

(cffi:defcfun ("tcidbmemsync" tcidbmemsync) :pointer
  (idb :pointer)
  (level :int))

(cffi:defcfun ("tcidbinode" tcidbinode) :pointer
  (idb :pointer))

(cffi:defcfun ("tcidbmtime" tcidbmtime) :pointer
  (idb :pointer))

(cffi:defcfun ("tcidbopts" tcidbopts) :pointer
  (idb :pointer))

(cffi:defcfun ("tcidbsetsynccb" tcidbsetsynccb) :void
  (idb :pointer)
  (cb :pointer)
  (opq :pointer))

(cffi:defcfun ("tcidbsetexopts" tcidbsetexopts) :void
  (idb :pointer)
  (exopts :pointer))

(cl:defconstant WDBSPCCHARS "\10\t\n\13\14\r ")

(cffi:defcstruct TCWDB
	(mmtx :pointer)
	(idx :pointer)
	(open :pointer)
	(cc :pointer)
	(icsiz :pointer)
	(lcnum :pointer)
	(dtokens :pointer)
	(dids :pointer)
	(etnum :pointer)
	(opts :pointer)
	(fwmmax :pointer)
	(synccb :pointer)
	(syncopq :pointer)
	(addcb :pointer)
	(addopq :pointer))

(defanonenum 
	(WDBTLARGE #.(cl:ash 1 0))
	(WDBTDEFLATE #.(cl:ash 1 1))
	(WDBTBZIP #.(cl:ash 1 2))
	(WDBTTCBS #.(cl:ash 1 3)))

(defanonenum 
	(WDBOREADER #.(cl:ash 1 0))
	(WDBOWRITER #.(cl:ash 1 1))
	(WDBOCREAT #.(cl:ash 1 2))
	(WDBOTRUNC #.(cl:ash 1 3))
	(WDBONOLCK #.(cl:ash 1 4))
	(WDBOLCKNB #.(cl:ash 1 5)))

(defanonenum 
	WDBSSUBSTR
	WDBSPREFIX
	WDBSSUFFIX
	WDBSFULL)

(cffi:defcfun ("tcwdberrmsg" tcwdberrmsg) :string
  (ecode :int))

(cffi:defcfun ("tcwdbnew" tcwdbnew) :pointer)

(cffi:defcfun ("tcwdbdel" tcwdbdel) :void
  (wdb :pointer))

(cffi:defcfun ("tcwdbecode" tcwdbecode) :int
  (wdb :pointer))

(cffi:defcfun ("tcwdbtune" tcwdbtune) :pointer
  (wdb :pointer)
  (etnum :pointer)
  (opts :pointer))

(cffi:defcfun ("tcwdbsetcache" tcwdbsetcache) :pointer
  (wdb :pointer)
  (icsiz :pointer)
  (lcnum :pointer))

(cffi:defcfun ("tcwdbsetfwmmax" tcwdbsetfwmmax) :pointer
  (wdb :pointer)
  (fwmmax :pointer))

(cffi:defcfun ("tcwdbopen" tcwdbopen) :pointer
  (wdb :pointer)
  (path :string)
  (omode :int))

(cffi:defcfun ("tcwdbclose" tcwdbclose) :pointer
  (wdb :pointer))

(cffi:defcfun ("tcwdbput" tcwdbput) :pointer
  (wdb :pointer)
  (id :pointer)
  (words :pointer))

(cffi:defcfun ("tcwdbput2" tcwdbput2) :pointer
  (wdb :pointer)
  (id :pointer)
  (text :string)
  (delims :string))

(cffi:defcfun ("tcwdbout" tcwdbout) :pointer
  (wdb :pointer)
  (id :pointer)
  (words :pointer))

(cffi:defcfun ("tcwdbout2" tcwdbout2) :pointer
  (wdb :pointer)
  (id :pointer)
  (text :string)
  (delims :string))

(cffi:defcfun ("tcwdbsearch" tcwdbsearch) :pointer
  (wdb :pointer)
  (word :string)
  (np :pointer))

(cffi:defcfun ("tcwdbsync" tcwdbsync) :pointer
  (wdb :pointer))

(cffi:defcfun ("tcwdboptimize" tcwdboptimize) :pointer
  (wdb :pointer))

(cffi:defcfun ("tcwdbvanish" tcwdbvanish) :pointer
  (wdb :pointer))

(cffi:defcfun ("tcwdbcopy" tcwdbcopy) :pointer
  (wdb :pointer)
  (path :string))

(cffi:defcfun ("tcwdbpath" tcwdbpath) :string
  (wdb :pointer))

(cffi:defcfun ("tcwdbtnum" tcwdbtnum) :pointer
  (wdb :pointer))

(cffi:defcfun ("tcwdbfsiz" tcwdbfsiz) :pointer
  (wdb :pointer))

(cffi:defcfun ("tcwdbsetdbgfd" tcwdbsetdbgfd) :void
  (wdb :pointer)
  (fd :int))

(cffi:defcfun ("tcwdbdbgfd" tcwdbdbgfd) :int
  (wdb :pointer))

(cffi:defcfun ("tcwdbmemsync" tcwdbmemsync) :pointer
  (wdb :pointer)
  (level :int))

(cffi:defcfun ("tcwdbcacheclear" tcwdbcacheclear) :pointer
  (wdb :pointer))

(cffi:defcfun ("tcwdbinode" tcwdbinode) :pointer
  (wdb :pointer))

(cffi:defcfun ("tcwdbmtime" tcwdbmtime) :pointer
  (wdb :pointer))

(cffi:defcfun ("tcwdbopts" tcwdbopts) :pointer
  (wdb :pointer))

(cffi:defcfun ("tcwdbfwmmax" tcwdbfwmmax) :pointer
  (wdb :pointer))

(cffi:defcfun ("tcwdbcnum" tcwdbcnum) :pointer
  (wdb :pointer))

(cffi:defcfun ("tcwdbsetsynccb" tcwdbsetsynccb) :void
  (wdb :pointer)
  (cb :pointer)
  (opq :pointer))

(cffi:defcfun ("tcwdbsetaddcb" tcwdbsetaddcb) :void
  (wdb :pointer)
  (cb :pointer)
  (opq :pointer))

(cl:defconstant JDBWDBMAX 32)

(cffi:defcstruct TCJDB
	(mmtx :pointer)
	(path :string)
	(wmode :pointer)
	(wopts :pointer)
	(womode :int)
	(txdb :pointer)
	(lsdb :pointer)
	(idxs :pointer)
	(inum :pointer)
	(cnum :pointer)
	(ernum :pointer)
	(etnum :pointer)
	(iusiz :pointer)
	(opts :pointer)
	(synccb :pointer)
	(syncopq :pointer)
	(exopts :pointer))

(defanonenum 
	(JDBTLARGE #.(cl:ash 1 0))
	(JDBTDEFLATE #.(cl:ash 1 1))
	(JDBTBZIP #.(cl:ash 1 2))
	(JDBTTCBS #.(cl:ash 1 3)))

(defanonenum 
	(JDBOREADER #.(cl:ash 1 0))
	(JDBOWRITER #.(cl:ash 1 1))
	(JDBOCREAT #.(cl:ash 1 2))
	(JDBOTRUNC #.(cl:ash 1 3))
	(JDBONOLCK #.(cl:ash 1 4))
	(JDBOLCKNB #.(cl:ash 1 5)))

(defanonenum 
	JDBSSUBSTR
	JDBSPREFIX
	JDBSSUFFIX
	JDBSFULL)

(cffi:defcfun ("tcjdberrmsg" tcjdberrmsg) :string
  (ecode :int))

(cffi:defcfun ("tcjdbnew" tcjdbnew) :pointer)

(cffi:defcfun ("tcjdbdel" tcjdbdel) :void
  (jdb :pointer))

(cffi:defcfun ("tcjdbecode" tcjdbecode) :int
  (jdb :pointer))

(cffi:defcfun ("tcjdbtune" tcjdbtune) :pointer
  (jdb :pointer)
  (ernum :pointer)
  (etnum :pointer)
  (iusiz :pointer)
  (opts :pointer))

(cffi:defcfun ("tcjdbsetcache" tcjdbsetcache) :pointer
  (jdb :pointer)
  (icsiz :pointer)
  (lcnum :pointer))

(cffi:defcfun ("tcjdbsetfwmmax" tcjdbsetfwmmax) :pointer
  (jdb :pointer)
  (fwmmax :pointer))

(cffi:defcfun ("tcjdbopen" tcjdbopen) :pointer
  (jdb :pointer)
  (path :string)
  (omode :int))

(cffi:defcfun ("tcjdbclose" tcjdbclose) :pointer
  (jdb :pointer))

(cffi:defcfun ("tcjdbput" tcjdbput) :pointer
  (jdb :pointer)
  (id :pointer)
  (words :pointer))

(cffi:defcfun ("tcjdbput2" tcjdbput2) :pointer
  (jdb :pointer)
  (id :pointer)
  (text :string)
  (delims :string))

(cffi:defcfun ("tcjdbout" tcjdbout) :pointer
  (jdb :pointer)
  (id :pointer))

(cffi:defcfun ("tcjdbget" tcjdbget) :pointer
  (jdb :pointer)
  (id :pointer))

(cffi:defcfun ("tcjdbget2" tcjdbget2) :string
  (jdb :pointer)
  (id :pointer))

(cffi:defcfun ("tcjdbsearch" tcjdbsearch) :pointer
  (jdb :pointer)
  (word :string)
  (smode :int)
  (np :pointer))

(cffi:defcfun ("tcjdbsearch2" tcjdbsearch2) :pointer
  (jdb :pointer)
  (expr :string)
  (np :pointer))

(cffi:defcfun ("tcjdbiterinit" tcjdbiterinit) :pointer
  (jdb :pointer))

(cffi:defcfun ("tcjdbiternext" tcjdbiternext) :pointer
  (jdb :pointer))

(cffi:defcfun ("tcjdbsync" tcjdbsync) :pointer
  (jdb :pointer))

(cffi:defcfun ("tcjdboptimize" tcjdboptimize) :pointer
  (jdb :pointer))

(cffi:defcfun ("tcjdbvanish" tcjdbvanish) :pointer
  (jdb :pointer))

(cffi:defcfun ("tcjdbcopy" tcjdbcopy) :pointer
  (jdb :pointer)
  (path :string))

(cffi:defcfun ("tcjdbpath" tcjdbpath) :string
  (jdb :pointer))

(cffi:defcfun ("tcjdbrnum" tcjdbrnum) :pointer
  (jdb :pointer))

(cffi:defcfun ("tcjdbfsiz" tcjdbfsiz) :pointer
  (jdb :pointer))

(defanonenum 
	(JDBXNOTXT #.(cl:ash 1 0)))

(cffi:defcfun ("tcjdbsetdbgfd" tcjdbsetdbgfd) :void
  (jdb :pointer)
  (fd :int))

(cffi:defcfun ("tcjdbdbgfd" tcjdbdbgfd) :int
  (jdb :pointer))

(cffi:defcfun ("tcjdbmemsync" tcjdbmemsync) :pointer
  (jdb :pointer)
  (level :int))

(cffi:defcfun ("tcjdbinode" tcjdbinode) :pointer
  (jdb :pointer))

(cffi:defcfun ("tcjdbmtime" tcjdbmtime) :pointer
  (jdb :pointer))

(cffi:defcfun ("tcjdbopts" tcjdbopts) :pointer
  (jdb :pointer))

(cffi:defcfun ("tcjdbsetsynccb" tcjdbsetsynccb) :void
  (jdb :pointer)
  (cb :pointer)
  (opq :pointer))

(cffi:defcfun ("tcjdbsetexopts" tcjdbsetexopts) :void
  (jdb :pointer)
  (exopts :pointer))

(cffi:defcstruct TCQDB
	(mmtx :pointer)
	(idx :pointer)
	(open :pointer)
	(cc :pointer)
	(icsiz :pointer)
	(lcnum :pointer)
	(dtokens :pointer)
	(dids :pointer)
	(etnum :pointer)
	(opts :pointer)
	(fwmmax :pointer)
	(synccb :pointer)
	(syncopq :pointer))

(defanonenum 
	(QDBTLARGE #.(cl:ash 1 0))
	(QDBTDEFLATE #.(cl:ash 1 1))
	(QDBTBZIP #.(cl:ash 1 2))
	(QDBTTCBS #.(cl:ash 1 3)))

(defanonenum 
	(QDBOREADER #.(cl:ash 1 0))
	(QDBOWRITER #.(cl:ash 1 1))
	(QDBOCREAT #.(cl:ash 1 2))
	(QDBOTRUNC #.(cl:ash 1 3))
	(QDBONOLCK #.(cl:ash 1 4))
	(QDBOLCKNB #.(cl:ash 1 5)))

(defanonenum 
	QDBSSUBSTR
	QDBSPREFIX
	QDBSSUFFIX
	QDBSFULL)

(cffi:defcvar ("tdversion" tdversion)
 :string)

(cffi:defcfun ("tcqdberrmsg" tcqdberrmsg) :string
  (ecode :int))

(cffi:defcfun ("tcqdbnew" tcqdbnew) :pointer)

(cffi:defcfun ("tcqdbdel" tcqdbdel) :void
  (qdb :pointer))

(cffi:defcfun ("tcqdbecode" tcqdbecode) :int
  (qdb :pointer))

(cffi:defcfun ("tcqdbtune" tcqdbtune) :pointer
  (qdb :pointer)
  (etnum :pointer)
  (opts :pointer))

(cffi:defcfun ("tcqdbsetcache" tcqdbsetcache) :pointer
  (qdb :pointer)
  (icsiz :pointer)
  (lcnum :pointer))

(cffi:defcfun ("tcqdbsetfwmmax" tcqdbsetfwmmax) :pointer
  (qdb :pointer)
  (fwmmax :pointer))

(cffi:defcfun ("tcqdbopen" tcqdbopen) :pointer
  (qdb :pointer)
  (path :string)
  (omode :int))

(cffi:defcfun ("tcqdbclose" tcqdbclose) :pointer
  (qdb :pointer))

(cffi:defcfun ("tcqdbput" tcqdbput) :pointer
  (qdb :pointer)
  (id :pointer)
  (text :string))

(cffi:defcfun ("tcqdbout" tcqdbout) :pointer
  (qdb :pointer)
  (id :pointer)
  (text :string))

(cffi:defcfun ("tcqdbsearch" tcqdbsearch) :pointer
  (qdb :pointer)
  (word :string)
  (smode :int)
  (np :pointer))

(cffi:defcfun ("tcqdbsync" tcqdbsync) :pointer
  (qdb :pointer))

(cffi:defcfun ("tcqdboptimize" tcqdboptimize) :pointer
  (qdb :pointer))

(cffi:defcfun ("tcqdbvanish" tcqdbvanish) :pointer
  (qdb :pointer))

(cffi:defcfun ("tcqdbcopy" tcqdbcopy) :pointer
  (qdb :pointer)
  (path :string))

(cffi:defcfun ("tcqdbpath" tcqdbpath) :string
  (qdb :pointer))

(cffi:defcfun ("tcqdbtnum" tcqdbtnum) :pointer
  (qdb :pointer))

(cffi:defcfun ("tcqdbfsiz" tcqdbfsiz) :pointer
  (qdb :pointer))

(cl:defconstant _TD_VERSION "0.9.9")

(cl:defconstant _TD_LIBVER 110)

(cl:defconstant _TD_FORMATVER "0.9")

(cl:defconstant QDBSYNCMSGF "started")

(cl:defconstant QDBSYNCMSGL "finished")

(cffi:defcstruct QDBRSET
	(ids :pointer)
	(num :int))

(cffi:defcstruct TCIDSET
	(buckets :pointer)
	(bnum :pointer)
	(trails :pointer))

(defanonenum 
	(TCTNLOWER #.(cl:ash 1 0))
	(TCTNNOACC #.(cl:ash 1 1))
	(TCTNSPACE #.(cl:ash 1 2)))

(cffi:defcfun ("tcqdbsetdbgfd" tcqdbsetdbgfd) :void
  (qdb :pointer)
  (fd :int))

(cffi:defcfun ("tcqdbdbgfd" tcqdbdbgfd) :int
  (qdb :pointer))

(cffi:defcfun ("tcqdbmemsync" tcqdbmemsync) :pointer
  (qdb :pointer)
  (level :int))

(cffi:defcfun ("tcqdbcacheclear" tcqdbcacheclear) :pointer
  (qdb :pointer))

(cffi:defcfun ("tcqdbinode" tcqdbinode) :pointer
  (qdb :pointer))

(cffi:defcfun ("tcqdbmtime" tcqdbmtime) :pointer
  (qdb :pointer))

(cffi:defcfun ("tcqdbopts" tcqdbopts) :pointer
  (qdb :pointer))

(cffi:defcfun ("tcqdbfwmmax" tcqdbfwmmax) :pointer
  (qdb :pointer))

(cffi:defcfun ("tcqdbcnum" tcqdbcnum) :pointer
  (qdb :pointer))

(cffi:defcfun ("tcqdbsetsynccb" tcqdbsetsynccb) :void
  (qdb :pointer)
  (cb :pointer)
  (opq :pointer))

(cffi:defcfun ("tcqdbresunion" tcqdbresunion) :pointer
  (rsets :pointer)
  (rsnum :int)
  (np :pointer))

(cffi:defcfun ("tcqdbresisect" tcqdbresisect) :pointer
  (rsets :pointer)
  (rsnum :int)
  (np :pointer))

(cffi:defcfun ("tcqdbresdiff" tcqdbresdiff) :pointer
  (rsets :pointer)
  (rsnum :int)
  (np :pointer))

(cffi:defcfun ("tctextnormalize" tctextnormalize) :void
  (text :string)
  (opts :int))

(cffi:defcfun ("tcidsetnew" tcidsetnew) :pointer
  (bnum :pointer))

(cffi:defcfun ("tcidsetdel" tcidsetdel) :void
  (idset :pointer))

(cffi:defcfun ("tcidsetmark" tcidsetmark) :void
  (idset :pointer)
  (id :pointer))

(cffi:defcfun ("tcidsetcheck" tcidsetcheck) :pointer
  (idset :pointer)
  (id :pointer))

(cffi:defcfun ("tcidsetclear" tcidsetclear) :void
  (idset :pointer))


